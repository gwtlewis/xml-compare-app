name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Lint and test job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "Installing backend dependencies..."
        cd backend && npm ci
        echo "Installing frontend dependencies..."
        cd ../frontend && npm ci
        
    - name: Lint backend
      run: |
        cd backend
        npm run lint
        
    - name: Lint frontend
      run: |
        cd frontend
        npm run lint
        
    - name: Test backend
      run: |
        cd backend
        npm run test
        
    - name: Test frontend
      run: |
        cd frontend
        npm run test
        
    - name: Build backend
      run: |
        cd backend
        npm run build
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Build and package job
  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "Installing backend dependencies..."
        cd backend && npm ci
        echo "Installing frontend dependencies..."
        cd ../frontend && npm ci
        
    - name: Build backend
      run: |
        cd backend
        npm run build
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Create deployment bundle
      run: |
        # Create dist directory
        mkdir -p dist
        
        # Copy backend build
        mkdir -p dist/backend
        cp -r backend/dist/* dist/backend/
        cp backend/package.json dist/backend/
        cp backend/package-lock.json dist/backend/
        
        # Copy frontend build
        mkdir -p dist/frontend
        cp -r frontend/dist/* dist/frontend/
        
        # Create deployment scripts
        cat > dist/start.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "üöÄ Starting XML Compare App..."
        cd backend
        npm install --only=production
        npm start
        EOF
        chmod +x dist/start.sh
        
        cat > dist/start-production.sh << 'EOF'
        #!/bin/bash
        set -e
        export NODE_ENV=production
        echo "üöÄ Starting XML Compare App in production mode..."
        cd backend
        npm install --only=production
        npm start
        EOF
        chmod +x dist/start-production.sh
        
        # Create package.json for deployment
        cat > dist/package.json << 'EOF'
        {
          "name": "xml-compare-app-deployment",
          "version": "1.0.0",
          "description": "XML Compare Application Deployment Bundle",
          "scripts": {
            "start": "./start.sh",
            "start:prod": "./start-production.sh"
          },
          "engines": {
            "node": ">=16.0.0",
            "npm": ">=8.0.0"
          }
        }
        EOF
        
        # Create README
        cat > dist/README.md << 'EOF'
        # XML Compare App - Deployment Bundle
        
        ## Quick Start
        ```bash
        npm install
        npm start
        ```
        
        ## Access Points
        - Backend API: http://localhost:3000
        - Frontend: Serve the frontend/ directory
        
        ## API Endpoints
        - POST /api/xml-compare/compare
        - POST /api/xml-compare/batch-compare
        - POST /api/xml-compare/compare-urls
        - GET /api/xml-compare/admin/test
        EOF
        
    - name: Upload deployment bundle
      uses: actions/upload-artifact@v4
      with:
        name: xml-compare-deployment
        path: dist/
        retention-days: 30
        
    - name: Create release assets
      if: github.event_name == 'release'
      run: |
        # Create zip file for release
        cd dist
        zip -r ../xml-compare-app-${{ github.event.release.tag_name }}.zip .
        cd ..
        
    - name: Upload release assets
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./xml-compare-app-${{ github.event.release.tag_name }}.zip
        asset_name: xml-compare-app-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

  # Performance test job (optional)
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Build projects
      run: |
        echo "Building backend..."
        cd backend && npm run build
        echo "Building frontend..."
        cd ../frontend && npm run build
        
    - name: Start backend for testing
      run: |
        cd backend
        npm start &
        echo "Waiting for backend to start..."
        sleep 15
        
    - name: Run basic performance tests
      run: |
        echo "üöÄ Running basic performance tests..."
        echo "Testing health endpoint..."
        curl -f http://localhost:3000/health || echo "Health check failed"
        echo "Testing health endpoint response format..."
        curl -s http://localhost:3000/health | grep -q "isAvailable" && echo "‚úÖ Health endpoint format is correct" || echo "‚ùå Health endpoint format issue"
        echo "Performance tests completed"
        
    - name: Create performance report
      run: |
        echo "# Performance Test Report" > performance-report.md
        echo "Date: $(date)" >> performance-report.md
        echo "" >> performance-report.md
        echo "## Backend Health Status" >> performance-report.md
        echo "Backend started successfully" >> performance-report.md
        echo "" >> performance-report.md
        echo "### Health Endpoint Test" >> performance-report.md
        echo "\`\`\`json" >> performance-report.md
        curl -s http://localhost:3000/health >> performance-report.md || echo "Health endpoint not available" >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.md
        retention-days: 7

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "Installing backend dependencies..."
        cd backend && npm ci
        echo "Installing frontend dependencies..."
        cd ../frontend && npm ci
        
    - name: Run npm audit (backend)
      run: |
        echo "üîç Backend security audit:"
        cd backend
        npm audit --audit-level=moderate || echo "‚ö†Ô∏è Backend audit found vulnerabilities but continuing..."
        
    - name: Run npm audit (frontend)
      run: |
        echo "üîç Frontend security audit:"
        cd frontend
        npm audit --audit-level=moderate || echo "‚ö†Ô∏è Frontend audit found vulnerabilities but continuing..."
        
    - name: Run Snyk security scan
      if: env.SNYK_TOKEN != ''
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --project-name=xml-compare-app
      continue-on-error: true
      
    - name: Skip Snyk scan (no token)
      if: env.SNYK_TOKEN == ''
      run: echo "‚ö†Ô∏è Skipping Snyk scan - SNYK_TOKEN not configured"

  # Docker build job (optional)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          xml-compare-app:latest
          xml-compare-app:${{ github.event.release.tag_name }} 